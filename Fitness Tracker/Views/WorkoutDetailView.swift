//
//  WorkoutDetailView.swift
//  Fitness Tracker
//
//  Created by Nikita Shestakov on 15.03.2025.
//

import SwiftUI
import CoreData


//–û—à–∏–±–∫–∞ Referencing initializer 'init(_:content:)' on 'ForEach' requires that 'NSObject' conform to 'RandomAccessCollection' –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ trainingDay.exercises –∏–º–µ–µ—Ç —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º ForEach. –í SwiftUI ForEach –æ–∂–∏–¥–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é, —Ä–µ–∞–ª–∏–∑—É—é—â—É—é –ø—Ä–æ—Ç–æ–∫–æ–ª RandomAccessCollection (–Ω–∞–ø—Ä–∏–º–µ—Ä, Array, Set –∏ —Ç.–¥.), –∞ —Ç–∞–∫–∂–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª—É Identifiable.
//
//–°—É–¥—è –ø–æ –≤—Å–µ–º—É, exercises –≤ TrainingDayEntity ‚Äî —ç—Ç–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ (relationship) –≤ Core Data, –∫–æ—Ç–æ—Ä–æ–µ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ NSSet (–∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø, —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–π –æ—Ç NSObject), –∞ –Ω–µ –∫–∞–∫ –º–∞—Å—Å–∏–≤ ([ExerciseEntity]). NSSet –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç RandomAccessCollection, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞.

struct WorkoutDetailView: View {
    let date: Date  // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
    @State private var showAddExerciseSheet = false

    @EnvironmentObject var viewModel: ExerciseViewModel
    

    var body: some View {
        VStack {
            Text("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ \(formattedDate(date))")
                .font(.title)
                .bold()
                //.padding()
            
            if let trainingDay = viewModel.currentTrainingDay(for: date),
               let exercisesSet = trainingDay.exercises {
            
                let exercises = exercisesSet.allObjects as! [ExerciseEntity] // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤
                

                List {
                    ForEach(exercises) { exercise in
//
//                        ForEach(exercise.sets?.allObjects as? [SetEntity] ?? []) { set_weight in
//                            let _ = print("üìå exercise[i] –≤ WorkoutDetailView: \(set_weight.weight)")
//                        }
//                        ForEach(Array((exercise.sets as? Set<SetEntity> ?? []).sorted { $0.index < $1.index }), id: \.self)  { set_weight in
//                            let _ = print("üìå exercise[i] –≤ WorkoutDetailView set_weight: \(set_weight.weight)")
//                        }
                        
                        //TODO: –≤–æ—Ç —Ç—É—Ç –æ—à–∏–±–∫–∞
                        // –°–ö–û–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–∏ –≤—ã–¥–∞—é—Ç 2 print / –æ—Ä–∏–≥–∏–Ω–∞–ª 4
                        NavigationLink(destination: ExerciseDetailView(exercise: exercise)) {
//                          Section(header: Text(exercise.name ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è").font(.headline)) {
                            VStack(alignment: .leading, spacing: 8) {
                                       Text(exercise.name ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                                           .font(.headline)
                                           .bold()
                                           .frame(maxWidth: .infinity, alignment: .leading) // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                                           .padding(.vertical, 2)
                                //Divider() // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                                ForEach(Array((exercise.sets as? Set<SetEntity> ?? []).sorted { $0.index < $1.index }), id: \.self) { set in
                                    //let _ = print("üìå weight –≤ WorkoutDetailView –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º SetListCardView: \(set.weight)")
                                           SetListCardView(set: set, viewModel: viewModel)
                                               .listRowInsets(EdgeInsets())
                                               .listRowBackground(Color.clear)
                                       }
                                   }
                                   .padding(.vertical, 2)
                        }
                    }
                    .onDelete { indexSet in
                        for index in indexSet {
                            let exerciseToDelete = exercises[index] // –¢–µ–ø–µ—Ä—å –±–µ—Ä–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ FetchResults
                            viewModel.deleteExerciseInCurrentDay(exercise: exerciseToDelete)
                        }
                    }
                }

            } else {
                Text("–ù–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å")
                    .foregroundColor(.gray)
                    .padding()
            }
                        Button("–î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ") {
                            showAddExerciseSheet.toggle()
                        }
                        .padding()
                        .background(Color.green)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                        .sheet(isPresented: $showAddExerciseSheet) {
                            AddExerciseView(date: date)
                        }
        }
    }
    
    private func formattedDate(_ date: Date?) -> String {
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        return date.map { formatter.string(from: $0) } ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"
    }

}

