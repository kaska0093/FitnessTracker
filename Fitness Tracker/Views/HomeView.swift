//
//  HomeView.swift
//  Fitness Tracker
//
//  Created by Nikita Shestakov on 14.03.2025.
//

import SwiftUI
import CoreData

struct HomeView: View {
    @State private var selectedTab = "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª"
    //@Environment(\.managedObjectContext) private var viewContext
    @EnvironmentObject var viewModel: ExerciseViewModel


    //@StateObject private var viewModel = ExerciseViewModel()
    let tabs = ["–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", "–ö–∞–ª–µ–Ω–¥–∞—Ä—å", "–°–æ–Ω"]
    

    

    
    func showDeleteConfirmation() {
        let alert = UIAlertController(title: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ",
                                      message: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å.",
                                      preferredStyle: .alert)
        
        alert.addAction(UIAlertAction(title: "–û—Ç–º–µ–Ω–∞", style: .cancel, handler: nil))
        
        alert.addAction(UIAlertAction(title: "–£–¥–∞–ª–∏—Ç—å", style: .destructive, handler: { _ in
            viewModel.deleteAllTrainingDays()
        }))
        
        // –ü–æ–ª—É—á–∞–µ–º rootViewController —á–µ—Ä–µ–∑ UIWindowScene
        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene {
            if let rootController = windowScene.windows.first?.rootViewController {
                rootController.present(alert, animated: true, completion: nil)
            }
        }
    }
    

    
    var body: some View {
        @Environment(\.managedObjectContext) var viewContext  // <-- –¥–æ–±–∞–≤–ª—è–µ–º
        //var viewContextt = PersistenceController.shared.container.viewContext

        VStack {
            // –í–µ—Ä—Ö–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            HStack {
                Button(action: {
                    handleButtonAction()
                }) {
                    Image(systemName: buttonIcon())
                        .font(.title2)
                        .foregroundColor(.gray)
                }

                Spacer()
                
                Text(headerTitle())
                    .font(.title)
                    .bold()

                
                Spacer()
                
                menuForCurrentTab()



            }
            .padding(.horizontal)


            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
            ScrollView(.horizontal, showsIndicators: false) {
                HStack(spacing: 10) {
                    ForEach(tabs, id: \.self) { tab in
                        Button(action: {
                            selectedTab = tab
                        }) {
                            Text(tab)
                                .padding(.vertical, 8)
                                .padding(.horizontal, 16)
                                .background(selectedTab == tab ? Color.blue : Color.gray.opacity(0.2))
                                .foregroundColor(selectedTab == tab ? .white : .black)
                                .clipShape(Capsule())
                        }
                    }
                }
                .padding(.horizontal)
            }
            .padding(.top)

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
            Spacer()
            selectedView()
//            if selectedTab == "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª" {
//                DashboardView()
//            } else if selectedTab == "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è" {
//                ContentView()
//            } else if selectedTab == "–ö–∞–ª–µ–Ω–¥–∞—Ä—å" {
//                CalendarView()
//            } else if selectedTab == "–°–æ–Ω" {
//                SleepView()
//            }
            Spacer()
        }
    }
}

extension HomeView {
    // MARK: - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
       func headerTitle() -> String {
           switch selectedTab {
           case "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è": return "–ú–æ–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
           case "–ö–∞–ª–µ–Ω–¥–∞—Ä—å": return "–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
           case "–°–æ–Ω": return "–ê–Ω–∞–ª–∏–∑ —Å–Ω–∞"
           default: return "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
           }
       }

       // MARK: - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∏–∫–æ–Ω–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
       func buttonIcon() -> String {
           switch selectedTab {
           case "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è": return "plus"  // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
           case "–ö–∞–ª–µ–Ω–¥–∞—Ä—å": return "calendar.badge.plus" // –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
           case "–°–æ–Ω": return "moon.zzz"  // –ê–Ω–∞–ª–∏–∑ —Å–Ω–∞
           default: return "clock"
           }
       }

       // MARK: - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∏
       func handleButtonAction() {
           switch selectedTab {
           case "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è":
               print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
           case "–ö–∞–ª–µ–Ω–¥–∞—Ä—å":
               print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
           case "–°–æ–Ω":
               print("–û—Ç–∫—Ä—ã—Ç–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∞")
           default:
               print("–û—Ç–∫—Ä—ã—Ç–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
           }
       }
    

       // MARK: - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é
       @ViewBuilder
       func menuForCurrentTab() -> some View {
           Menu {
               switch selectedTab {
               case "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è":
                   Button(action: { viewModel.loadExercisesFromJSON() } ) {
                       Label("–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", systemImage: "person")
                   }
               case "–ö–∞–ª–µ–Ω–¥–∞—Ä—å":
                   Button(action: {
                       showDeleteConfirmation()
                   }) {
                       Text("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
                           .padding()
                           .background(Color.red)
                           .foregroundColor(.white)
                           .cornerRadius(10)
                   }
               case "–°–æ–Ω":
                   Button(action: { print("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–Ω–∞") }) {
                       Label("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–Ω–∞", systemImage: "gearshape")
                   }
               default:
                   Button(action: { print("–í—ã—Ö–æ–¥") }) {
                       Label("–í—ã—Ö–æ–¥", systemImage: "arrow.right.circle")
                   }
               }
           } label: {
               Image(systemName: "line.horizontal.3")
                   .imageScale(.large)
                   .padding()
           }
       }

       // MARK: - –í—ã–±–æ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
       @ViewBuilder
       func selectedView() -> some View {
           switch selectedTab {
           case "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è": ContentView()
           case "–ö–∞–ª–µ–Ω–¥–∞—Ä—å": CalendarView()
           case "–°–æ–Ω": SleepView()
           default: DashboardView()
           }
       }
    
}


struct DashboardView: View {
    var body: some View {
        Text("üìä –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª")
            .font(.largeTitle)
            .bold()
    }
}


struct SleepView: View {
    var body: some View {
        Text("üò¥ –°–æ–Ω")
            .font(.largeTitle)
            .bold()
    }
}






