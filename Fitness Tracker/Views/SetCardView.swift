//
//  SetCardView.swift
//  Fitness Tracker
//
//  Created by Nikita Shestakov on 15.03.2025.
//

import SwiftUI
import CoreData

//TODO: –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–∞–¥–æ –∫ ViewModel
struct SetCardView: View {
    @ObservedObject var set: SetEntity
    //@Environment(\.managedObjectContext) private var viewContext
    @EnvironmentObject var viewModel: ExerciseViewModel

    
    var body: some View {
        let _ = print("üìå weight –≤ SetCardView –≥–¥–µ picker: \(set.weight)")
        VStack {
            HStack {
                Spacer()
                //Text("–í–µ—Å: \(set.weight, specifier: "%.2f") –∫–≥")
                TextField("–í–µ—Å (–∫–≥)", value: Binding(
                                                get: { set.weight },
                                                set: { newValue in
                                                    let weight = max(0, min(500.75, newValue)) // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 0‚Äì500.75
                                                    set.weight = weight
                                                }
                                            ), format: .number)
                                            .keyboardType(.decimalPad) // –ß–∏—Å–ª–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–æ—á–∫–æ–π
                                            .textFieldStyle(.roundedBorder)
                                            .frame(width: 100)
                                            .multilineTextAlignment(.center)
                                            .toolbar {
                                                ToolbarItemGroup(placement: .keyboard) {
                                                    //Spacer() // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–ø—Ä–∞–≤–∞
                                                    Button("Done") {
                                                        UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
                                                    }
                                                }
                                            }
                Spacer()
                Text("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: \(set.reps)")
                Spacer()
            }
            .padding()
            .background(RoundedRectangle(cornerRadius: 10).fill(Color.blue.opacity(0.2)))
            
            HStack {
                // –î–≤–∞ Picker –¥–ª—è –≤–µ—Å–∞
                                        Picker("–ö–≥", selection: Binding(
                                            get: { Int(set.weight) }, // –¶–µ–ª–∞—è —á–∞—Å—Ç—å (–∫–∏–ª–æ–≥—Ä–∞–º–º—ã)
                                            set: { newKg in
                                                let grams = set.weight - Double(Int(set.weight)) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å
                                                set.weight = Double(newKg) + grams // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å
                                            }
                                        )) {
                                            ForEach(0...500, id: \.self) { kg in
                                                Text("\(kg) –∫–≥").tag(kg)
                                            }
                                        }
                                        .pickerStyle(.wheel)
                                        .frame(width: 100, height: 100)
                
                Picker("–≥", selection: Binding(
                                            get: { Int((set.weight - Double(Int(set.weight))) * 1000) }, // –î—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å –≤ –≥—Ä–∞–º–º–∞—Ö
                                            set: { newGrams in
                                                let kg = Double(Int(set.weight)) // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—É—é —á–∞—Å—Ç—å
                                                set.weight = kg + Double(newGrams) / 1000 // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å
                                            }
                                        )) {
                                            ForEach([0, 250, 500, 750], id: \.self) { grams in
                                                Text("\(grams) –≥").tag(grams)
                                            }
                                        }
                                        .pickerStyle(.wheel)
                                        .frame(width: 100, height: 100)
                                        
                                        Spacer()
                

                
                Stepper("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è", value: Binding(get: { set.reps }, set: { set.reps = $0 }))
                    .frame(width: 150)
                Spacer()
            }
            .padding(.horizontal)
        }
        .padding()
        .onDisappear {
            viewModel.saveContext()
        }
    }
}
